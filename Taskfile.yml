# https://taskfile.dev

version: '3'

vars:
  GREETING: Hello, World!
  GITUSER:
    sh: git config user.name || echo "Unknown User"
tasks:

  setup-system:
    desc: Install system dependencies
    sources:
      - setup/*
    cmds:
      - bash setup/setup.sh

  # setup-venv:
  #   desc: Create virtual environment if needed
  #   deps: [setup-system]
  #   status:
  #     - test -d .venv
  #   cmds:
  #     - uv venv --clear

  install:
    desc: Install dependencies and package
    # deps: [setup-venv]
    sources:
      - pyproject.toml
      - uv.lock
      - Taskfile.yml
    generates:
      - .venv/pyvenv.cfg
    cmds:
      - uv sync --all-extras --dev
      - uv pip install -e .
      - |
        # Only run the demo CLI when running interactively (prevents hanging in CI/background)
        if [ -t 1 ]; then
          uv run hungovercoders-template-hello --name "{{.GITUSER}}"
        else
          echo "Skipping interactive demo: non-interactive shell detected"
        fi

  install-vscode-extensions:
    desc: Install all recommended VSCode extensions
    sources:
      - .vscode/extensions.json
      - Taskfile.yml
    cmds:
      - |
        if [ -f .vscode/extensions.json ]; then
          # Extract extension IDs from extensions.json and install them
          grep -o '"[^"]*"' .vscode/extensions.json | grep -v "recommendations\|unwantedRecommendations" | tr -d '"' | while read -r extension; do
            if [ -n "$extension" ]; then
              echo "Installing extension: $extension"
              code --install-extension "$extension" --force
            fi
          done
        else
          echo "No .vscode/extensions.json found"
        fi

  setup-workspace:
    desc: Setup complete workspace with extensions and dependencies
    deps: [install, install-vscode-extensions]
    cmds:
      - echo "‚úÖ Workspace setup completed with all dependencies and extensions"

  build:
    desc: Build the package
    deps: [install]
    sources:
      - src/**/*.py
      - pyproject.toml
      - Taskfile.yml
    generates:
      - dist/*.whl
      - dist/*.tar.gz
    cmds:
      - uv build

  lint:
    desc: Run linting and build checks
    deps: [build]
    sources:
      - src/**/*.py
      - tests/**/*.py
      - pyproject.toml
      - Taskfile.yml
    cmds:
      - |
        # Fail fast if lint hangs: 5 minute timeout
        timeout 5m uvx ruff check
      - uvx twine check dist/*

  lint-fix:
    desc: Run linting and build checks
    deps: [build]
    sources:
      - src/**/*.py
      - tests/**/*.py
      - pyproject.toml
      - Taskfile.yml
    cmds:
      - |
        # Fail fast if lint hangs: 5 minute timeout
        timeout 5m uvx ruff format

  test:
    desc: Run tests with coverage (CI mode - output to files)
    deps: [install]
    sources:
      - src/**/*.py
      - tests/**/*.py
      - pyproject.toml
      - Taskfile.yml
    cmds:
      - |
        # Fail tests if they hang: 10 minute timeout. Produce junit and coverage artifacts and capture console output.
        timeout 10m uv run pytest --junit-xml=pytest-results.xml --cov=src --cov-report=xml --cov-report=term > test_output.txt 2>&1 || { cat test_output.txt; exit 1; }

  test-dev:
    desc: Run tests with live output (development mode)
    deps: [install]
    cmds:
      - uv run pytest -v --tb=short

  test-watch:
    desc: Simple watch mode - manually press Enter to rerun tests
    deps: [install]
    cmds:
      - |
        echo "üß™ Simple Test Watcher"
        echo "Press Enter to run tests, Ctrl+C to exit"
        echo "======================================"
        while true; do
          read -p "üëÄ Press Enter to run tests (Ctrl+C to exit): " 
          echo ""
          uv run pytest -v --tb=short
          echo ""
        done

  test-coverage:
    desc: Run tests with coverage report displayed
    deps: [install]
    cmds:
      - uv run pytest --cov=src --cov-report=term-missing -v

  test-file:
    desc: "Run tests for a specific file (use: task test-file -- tests/test_greetings.py)"
    deps: [install]
    cmds:
      - uv run pytest -v {{.CLI_ARGS}}

  test-function:
    desc: "Run a specific test function (use: task test-function -- tests/test_greetings.py::test_hello)"
    deps: [install]
    cmds:
      - uv run pytest -v -s {{.CLI_ARGS}}

  test-debug:
    desc: Run tests with maximum verbosity and debug info
    deps: [install]
    cmds:
      - uv run pytest -vvs --tb=long --capture=no

  test-failed:
    desc: Run only the tests that failed in the last run
    deps: [install]
    cmds:
      - uv run pytest --lf -v

  test-output:
    desc: Show the output from the last CI test run
    cmds:
      - |
        if [ -f test_output.txt ]; then
          echo "üìÑ Last Test Output (from test_output.txt):"
          echo "==========================================="
          cat test_output.txt
        else
          echo "‚ùå No test_output.txt found. Run 'task test' first."
        fi

  ci:
    desc: Run full CI pipeline
    deps: [lint, test]
    cmds:
      - echo "‚úÖ CI pipeline completed successfully"

  clean-ci:
    desc: Clean build artifacts and task cache
    cmds:
      - rm -rf dist/
      - rm -rf build/
      - rm -rf *.egg-info/
      - rm -rf .task/
      - find . -type d -name __pycache__ -exec rm -rf {} +
      - find . -name "*.pyc" -delete
      - echo "‚úÖ CI artifacts cleaned successfully" 

  docs:
    desc: Build documentation with MkDocs
    deps: [install]
    sources:
      - docs/**/*.md
      - mkdocs.yml
      - src/**/*.py
      - Taskfile.yml
    generates:
      - site/index.html
    cmds:
      - uv run mkdocs build --strict

  docs-serve:
    desc: Serve documentation locally
    deps: [install]
    cmds:
      - uv run mkdocs serve --strict --dev-addr 0.0.0.0:8000

  docs-deploy:
    desc: Deploy documentation to GitHub Pages
    deps: [docs]
    cmds:
      - uv run mkdocs gh-deploy

  clean-docs:
    desc: Clean docs build artifacts
    cmds:
      - rm -rf site/
      - echo "‚úÖ Docs artifacts cleaned successfully" 

  clean:
    desc: Clean build artifacts and task cache
    deps: [clean-docs, clean-ci]
    cmds:
      - echo "‚úÖ Artifacts cleaned successfully"

  # Development helper tasks
  docs-force:
    desc: Force rebuild documentation
    cmds:
      - task docs --force

  ci-force:
    desc: Force run entire CI pipeline
    cmds:
      - task ci --force

  debug:
    desc: Show task status for debugging
    cmds:
      - echo "=== Task Status Debug ==="
      - task --dry docs
      - task --dry build
      - task --dry test