{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>This is a template for creating Python packages. It includes a basic structure and some common files that are typically found in Python packages.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#unreleased","title":"[unreleased]","text":""},{"location":"changelog/#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Feat: add VSCode extensions for conventional commits and spell checking docs: update template creation instructions for clarity (2025-06-01)</li> <li>Update devcontainer setup to use separate requirements files for development and documentation (2025-06-01)</li> <li>Add permissions section to GitHub Actions workflow for content write access (2025-06-01)</li> <li>Update workflow name for clarity and fix image path in documentation (2025-06-01)</li> <li>Add striptags to cSpell words and create initial cliff.toml configuration for changelog generation (2025-06-01)</li> <li>Update devcontainer and VSCode settings, enhance changelog configuration (2025-06-01)</li> <li>Add step to generate changelog in GitHub Actions workflow and update documentation (2025-06-01)</li> <li>Update documentation, add Python version, and implement greeting functionality with CLI support (2025-06-01)</li> <li>Update devcontainer configuration, enhance documentation for package initialization, and add unit tests for greetings module (2025-06-01)</li> <li>Replace inline postCreateCommand with setup script for improved installation process (2025-06-01)</li> <li>Enhance CI workflow to run tests and generate JUnit XML, upload test results, and publish them (2025-06-01)</li> <li>Add goodbye and goodbye_cli functions for farewell greetings (2025-06-01)</li> <li>Add goodbye functions and corresponding tests for farewell greetings (2025-06-01)</li> </ul>"},{"location":"changelog/#bug-fixes","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Correct pytest argument for JUnit XML output in CI workflow (2025-06-01)</li> <li>Ensure pytest is installed before running tests in CI workflow (2025-06-01)</li> <li>Correct pytest argument for JUnit XML output in CI workflow (2025-06-01)</li> <li>Update CI workflow to install dependencies from requirements file and add pytest results output (2025-06-01)</li> <li>Correct pip install command in CI workflow for requirements file (2025-06-01)</li> <li>Install package for testing before running tests in CI workflow (2025-06-01)</li> <li>Update CI workflow to build distribution and check with twine before testing (2025-06-01)</li> <li>Enhance CI workflow to check for test failures and coverage requirements (2025-06-01)</li> <li>Adjust indentation for goodbye CLI tests in test_greetings.py (2025-06-01)</li> </ul>"},{"location":"changelog/#other","title":"\ud83d\udcbc Other","text":"<ul> <li>Initial commit (2025-06-01)</li> <li>Init repo (2025-06-01)</li> <li>Initalised documentation publishing (2025-06-01)</li> <li>Remove Copilot instructions file and update documentation structure (2025-06-01)</li> <li>Add test placeholder to documentation (2025-06-01)</li> </ul>"},{"location":"changelog/#refactor","title":"\ud83d\ude9c Refactor","text":"<ul> <li>:fire: removing publish docs as automated by github (2025-06-01)</li> <li>Improve CI workflow steps for clarity and consistency (2025-06-01)</li> </ul>"},{"location":"changelog/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Add a new line for better readability in README (2025-06-01)</li> </ul>"},{"location":"changelog/#miscellaneous-tasks","title":"\u2699\ufe0f Miscellaneous Tasks","text":"<ul> <li>:construction_worker: initlialised CI with testing and linting (2025-06-01)</li> <li>Add permissions section for improved workflow access control (2025-06-01)</li> </ul>"},{"location":"how/","title":"How this Template was Made","text":""},{"location":"how/#initialise-repo-and-environment","title":"Initialise Repo and Environment","text":"<ol> <li> <p>Created a new repository on GitHub.</p> <ul> <li>Gave an appropriate name and description.</li> <li>Added a README file.</li> <li>Added a .gitignore file for Python.</li> <li>Selected a license (MIT License).</li> </ul> <p></p> </li> <li> <p>Added Copilot Context File</p> <ul> <li>Created a <code>.github/copilot-instructions.md</code> file to provide context for Copilot.</li> </ul> </li> <li> <p>Opened in codespaces and amended environment configuration.</p> <ul> <li>Added a <code>devcontainer.json</code> file to configure the development environment using devcontainers standards in vs code.</li> <li>Added a requirements_dev.txt file for the packages required for development.</li> <li>Added a requirements_docs.txt file for the packages required for documentation.</li> <li>Created a setup.sh file to automate the post create setup process in the devcontainer.</li> </ul> </li> <li> <p>Reopened the codespace to confirm devcontainer configuration</p> <ul> <li>Confirmed VS code extensions installed.</li> <li>Leveraged errorlens and spell checker to clean-up any markdown or spelling errors.</li> </ul> <p></p> <ul> <li>Confirmed package requirements installed in the codespace.</li> </ul> <p><code>bash pip list</code></p> <p></p> </li> </ol>"},{"location":"how/#published-documentation","title":"Published Documentation","text":"<ol> <li> <p>Created documentation</p> <ul> <li>Utilising MkDocs for documentation generation, installed as part of devcontainer setup.</li> <li>Created a <code>mkdocs.yml</code> file to configure the documentation.</li> <li>Created a <code>docs</code> directory with an initial <code>index.md</code> file.</li> <li>Built the documentation using:</li> </ul> <p><code>bash   mkdocs build --strict</code></p> <ul> <li>Served the documentation locally to confirm it works:</li> </ul> <p><code>bash   mkdocs serve --strict</code></p> <p></p> </li> <li> <p>Published documentation to GitHub Pages</p> <ul> <li>Enabled GitHub Pages in the repository settings, selecting the <code>gh-pages</code> branch as the source.</li> </ul> <p></p> <ul> <li>Created a <code>.github/workflows/gh-pages.yml</code> file with the necessary steps to build and deploy the documentation to the github pages branch configured above.</li> <li>Committed and pushed changes to trigger the workflows.</li> <li>Confirmed the documentation is available at <code>https://&lt;username&gt;.github.io/&lt;repository-name&gt;/</code>. e.g. https://hungovercoders.github.io/template.python.package/</li> </ul> <p></p> </li> </ol>"},{"location":"how/#created-changelog","title":"Created Changelog","text":"<ol> <li> <p>Create a <code>docs/changelog.md</code> file</p> <ul> <li>Utilised git-cliff for changelog generation installed as part of devcontainer setup.</li> <li>Created a cliff.toml file to configure the changelog.</li> <li>Confirmed working by running:</li> </ul> <p><code>bash   git-cliff -c cliff.toml</code></p> <ul> <li>Can see changelog file populated locally.</li> </ul> <p></p> </li> <li> <p>Added a GitHub Action to automatically generate the changelog</p> <ul> <li>Amended <code>.github/workflows/gh-pages.yml</code> file to include a step to generate the changelog automatically using git-cliff.</li> <li>Confirmed working by pushing changes and checking the generated changelog on live documentation site.</li> </ul> <p></p> </li> </ol>"},{"location":"how/#initialise-package","title":"Initialise Package","text":"<ol> <li> <p>Initialised the package using uv</p> <ul> <li>Leveraged uv to initialise the package which was installed as part of devcontainer setup.</li> <li>Execute script below to initialise package.</li> </ul> <p><code>bash   uv init --lib hungovercoders_template_python_package</code></p> <ul> <li>Moved pyproject.toml and python-version file along with src folder to the root of the repo and cleared up directory.</li> <li>Added <code>greetings</code> module with hello function with the ability to call cli.</li> <li>Updated pyproject.toml file with appropriate configuration details including a cli call to the hello function.</li> <li>Installed the package locally using:</li> </ul> <p><code>bash   pip install -e .</code></p> <ul> <li>Confirmed the package is installed and working by running:</li> </ul> <p><code>bash   hungovercoders-template-hello --name griff</code></p> <ul> <li>Output should be:</li> </ul> <p><code>Hungovercoders say hello to griff!</code></p> </li> <li> <p>Added tests for the package</p> <ul> <li>Created a [<code>tests</code>] directory with an initial <code>test_hello.py</code> file.</li> <li>Utilised pytest for testing, installed as part of devcontainer setup by running: </li> </ul> <p><code>bash   pytest</code>   - Confirmed tests pass and package is functioning as expected.   </p> </li> <li> <p>Linted the code</p> <ul> <li>Utilised ruff for linting, installed as part of devcontainer setup.</li> </ul> </li> <li> <p>Confirmed code is linted and follows best practices by running the command.</p> </li> </ol> <p><code>bash    uvx ruff check .</code></p> <ol> <li>Checked distribution files</li> <li>Utilised twine to check the distribution files.</li> <li>Created the distribution files using:</li> </ol> <p><code>bash    uv build</code></p> <ul> <li>Checked the distribution files using:</li> </ul> <p><code>bashuv     uvx twine check dist/*</code></p> <ol> <li>Created github actions to run tests and linting on pull requests and pushes to main branch.</li> <li>Created a <code>.github/workflows/ci.yml</code> file with the necessary steps to run tests and linting.</li> <li>Confirmed working by pushing changes and checking the actions tab in GitHub.</li> </ol>"},{"location":"how/#publish-package-to-pypi","title":"Publish Package to PyPI","text":""}]}